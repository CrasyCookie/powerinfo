#!/bin/sh
SCRIPT_VERSION=1.2.0
POWERINFO_VERSION=1.5.0
SCRIPT_PATH="$(dirname "$(realpath "$0")")"
POWERINFO_INSTALL_DIRECTORY="/usr/local/bin/"
MAN_PAGE_INSTALL_DIRECTORY="/usr/local/man/"

INSTALL=0
INSTALL_MAN=0
SYMLINK=0
BYPASS_PRIVILEGE_CHECK=0
UPDATE=0
UNINSTALL=0

MAN_PAGE_1="$SCRIPT_PATH/man/powerinfo.1.gz"

printf "Install script v%s for powerinfo v%s\n\n" "$SCRIPT_VERSION" "$POWERINFO_VERSION"


help() {
    printf "Usage:
./install -U (uninstall)
./install -imu (recommended install)
./install -imsuU
Available arguments:
  -i              Install powerinfo
  -m              Install man-pages (for use with man)
  -s              Make a symlink instead of copying the file
  -u              Update the repository before installing (use with -i)
  -U              Uninstall powerinfo and it's man-pages

  -d DIRECTORY    Use alternative powerinfo install directory
  -D DIRECTORY    Use alternative man-page install directory

  -R              Bypass the superuser (root) check.
  -h              Show help
  -v              Output version and exit
Remember that the install requires superuser privleges (root)\n"
  exit 0
}
is_root() {
    if [ "$BYPASS_PRIVILEGE_CHECK" -eq 0 ] && [ "$(id -u)" -ne 0 ]; then
        printf "This install script needs to be run as a superuser (root)
Use sudo, doas, run0 or log in as root
You can use the -R flag to bypass this, but be aware that the installation might fail and/or break\n"
        exit 1
    fi
    return 0
}
if_exists() {
    # First argument should be the comparison flag to use (e, d, f)
    # Second should be a 1 or a 0;
    # 1 for user error if it doesn't exist
    # 0 for script error if it doesn't exist
    # Third should be the directory to check.
    if [ ! -"$1" "$3" ]; then
        printf "ERROR: %s does not exist. Exiting.\n" "$3"
        if [ "$2" -eq 1]; then
            printf "Please make sure that you are submitting the right flags and that
all paths are right as this is almost certanly user error.
If it is not user error then please open an issue on github.
https://github.com/CrasyCookie/powerinfo
If you open an issue then try to include relevant information,
including this error message and if you were using the -R flag.\n"
            exit 1
        fi
        printf "Please do the install by hand or open an issue on github.
https://github.com/CrasyCookie/powerinfo
If you open an issue then try to include relevant information,
including this error message and if you were using the -R flag.\n"
        exit 2
    fi
    return 0
}

if [ -z "$1" ]; then
    help
else
    while getopts d:D:himRsuUv FLAGS
    do
        case $FLAGS in
            d)  POWERINFO_INSTALL_DIRECTORY="$OPTARG"
                if_exists d 1 "$POWERINFO_INSTALL_DIRECTORY"
                ;;
            D)
                MAN_PAGE_INSTALL_DIRECTORY="$OPTARG"
                if_exists d 1 "$MAN_PAGE_INSTALL_DIRECTORY"
                ;;
            h)  help
                ;;
            i)  INSTALL=1
                ;;
            m)  INSTALL_MAN=1
                ;;
            R)  BYPASS_PRIVILEGE_CHECK=1
                ;;
            s)  SYMLINK=1
                ;;
            u)  UPDATE=1
                ;;
            U)  UNINSTALL=1
                ;;
            v)  exit 0
                ;;
            ?)  printf "Unknown argument. Use -h for help.\n"
                exit 1
        esac
    done
fi

if [ "$UPDATE" -eq 1 ]; then
    printf "Updating repository.\n"
    cd "$SCRIPT_PATH" && git pull
    printf "\n"
fi
if [ "$INSTALL" -eq 1 ] && is_root; then
    if_exists d 0 "$POWERINFO_INSTALL_DIRECTORY"
    if [ "$SYMLINK" -eq 1 ]; then
        printf "Symlinking"
        ln --symbolic --force --target-directory="$POWERINFO_INSTALL_DIRECTORY" "$SCRIPT_PATH/powerinfo"
    else
        printf "Copying/Installing"
        install "$SCRIPT_PATH/powerinfo" "$POWERINFO_INSTALL_DIRECTORY"
    fi
    printf " powerinfo.\n\n"
fi
if [ "$INSTALL_MAN" -eq 1 ] && is_root; then
    if_exists e 0 "$MAN_PAGE_1"
    mkdir -p "$MAN_PAGE_INSTALL_DIRECTORY/man1/"
    if_exists d 0 "$MAN_PAGE_INSTALL_DIRECTORY/man1/"
    if [ "$SYMLINK" -eq 1 ]; then
        printf "Symlinking"
        ln --symbolic --target-directory="$MAN_PAGE_INSTALL_DIRECTORY/man1/" "$MAN_PAGE_1"
    else
        printf "Copying"
        install -g 0 -o 0 -m 0644 "$MAN_PAGE_1" "$MAN_PAGE_INSTALL_DIRECTORY/man1/"
    fi
    printf " man pages.\n\n"
fi
if [ "$UNINSTALL" -eq 1 ] && is_root; then
    if [ -e "$POWERINFO_INSTALL_DIRECTORY/powerinfo" ]; then
        rm "$POWERINFO_INSTALL_DIRECTORY/powerinfo" &&
        printf "Uninstalled powerinfo command from $POWERINFO_INSTALL_DIRECTORY.\n"
        uninstalled=1
    fi
    if [ -e "$MAN_PAGE_INSTALL_DIRECTORY/man1/powerinfo.1.gz" ]; then
        rm "$MAN_PAGE_INSTALL_DIRECTORY/man1/powerinfo.1.gz" &&
        printf "Uninstalled powerinfo man-pages from $MAN_PAGE_INSTALL_DIRECTORY.\n"
        uninstalled=1
    fi
    if [ -e "/etc/powerinfo" ]; then
        rm "/etc/powerinfo" &&
        printf "Removed powerinfo configuration file from /etc/powerinfo.\n"
        uninstalled=1
    fi
    if [ -z "$uninstalled" ] || [ "$uninstalled" -eq 0 ]; then
        printf "Nothing to uninstall.\n"
    fi
    printf "\n"
fi
printf "Done.\n"
if [ "$SYMLINK" -eq 0 ] && [ "$INSTALL" -eq 1 ]; then
    printf "You can now safetly remove this directory if you want to.\n"
fi
