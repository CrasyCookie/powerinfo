#!/usr/bin/env python3
# SPDX-License-Identifier: MIT
# Source: https://github.com/CrasyCookie/powerinfo
VERSION: str = "2.0.0"
LICENSE = """
MIT License

Copyright (c) 2024 CrasyCookie

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

import argparse
from pathlib import Path
import sys
import os

parser = argparse.ArgumentParser(
        description="A utility that reports battery information.",
        epilog="License: MIT Homepage: https://github.com/CrasyCookie/powerinfo"
        )

parser.add_argument("-v", "--version", action="store_true", help="show version and exit")
parser.add_argument("-L", "--license", action="store_true", help="show license and exit")
parser.add_argument("-l", "--list-batteries", action="store_true", help="List available batteries and AC")
parser.add_argument("-B", "--battery", type=str, help="Use alternative battery")
parser.add_argument("-R", "--raw", action="store_true", help="Only output raw values without fluff")

parser.add_argument("-a", "--all", action="store_true", help="Activates all flags below")
parser.add_argument("-c", "--cycles", action="store_true", help="Show battery cycles")
parser.add_argument("-p", "--percentage", action="store_true", help="Show battery charge percentage")
parser.add_argument("-s", "--status", action="store_true", help="Show charging status (Charging/Discharging)")
parser.add_argument("-t", "--thresholds", action="store_true", help="Show charging thresholds in output")
parser.add_argument("-w", "--current-charge", action="store_true", help="Show current charge out of design charge in output")
parser.add_argument("-W", "--max-charge", action="store_true", help="Show maximum charge out of design charge")
parser.add_argument("-H", "--health", action="store_true", help="Show battery health percentage")

args = parser.parse_args()

if args.battery:
    BATTERY_NAME: str = args.battery
else:
    BATTERY_NAME: str = "BAT0"
BATTERY_DIR: str = "/sys/class/power_supply/"
BATTERY: str = BATTERY_DIR + BATTERY_NAME

def error(exit_code: int, *args, **kwargs) -> None:
    print("ERROR: ", args, kwargs)
    sys.exit(exit_code)

def GetValue(path: str) -> str:
    global BATTERY
    try:
        return Path(BATTERY + "/" + path).read_text().strip()
    except FileNotFoundError:
        error_message = f"Battery {BATTERY_NAME} does not exist"
        error(1, error_message)


if args.license:
    print(LICENSE)
    sys.exit(0)
elif args.version:
    print("Powerinfo v" + VERSION)
    sys.exit(0)
elif args.list_batteries:
    if not args.raw:
        print("Available batteries:")
    os.system(f"ls --color=never {BATTERY_DIR}")
    sys.exit(0)

if args.all:
    args.percentage = True
    args.cycles = True
    args.status = True
    args.thresholds = True
    args.current_charge = True
    args.max_charge = True
    args.health = True

if args.raw:
    if args.percentage:
        print(GetValue("capacity") + "%")
    if args.cycles:
        print(GetValue("cycle_count"))
    if args.status:
        print(GetValue("status").lower())
    if args.thresholds:
        print(GetValue("charge_start_threshold") + "%-" +
              GetValue("charge_stop_threshold") + "%")
    if args.current_charge:
        current_charge: str = str(round(int(GetValue("energy_now"))/1000000,1))
        full_charge: str = str(round(int(GetValue("energy_full"))/1000000,1))
        print(current_charge + "Wh/" + full_charge + "Wh")
    if args.max_charge:
        full_charge: str = str(round(int(GetValue("energy_full"))/1000000,1))
        design_charge: str = str(round(int(GetValue("energy_full_design"))/1000000,1))
        print(full_charge + "Wh/" + design_charge + "Wh")
    if args.health:
        full_charge: float = int(GetValue("energy_full")) / 1000000
        design_charge: float = int(GetValue("energy_full_design")) / 1000000
        print(f"{round(full_charge / design_charge * 100)}%")
else:
    if args.percentage:
        print(f"Battery left: {GetValue("capacity")}%")
    if args.cycles:
        print(f"Battery has gone through {GetValue("cycle_count")} cycles")
    if args.status:
        print(f"Battery is currently {GetValue("status").lower()}")
    if args.thresholds:
        print(f"Charging starts at {GetValue("charge_start_threshold")}% "
              f"and stops at {GetValue("charge_stop_threshold")}%")
    if args.current_charge:
        current_charge: float = round(int(GetValue("energy_now"))/1000000,1)
        full_charge: float = round(int(GetValue("energy_full"))/1000000,1)
        print(f"Battery currently holds {current_charge}Wh/{full_charge}Wh")
    if args.max_charge:
        full_charge: float = round(int(GetValue("energy_full"))/1000000,1)
        design_charge: float = round(int(GetValue("energy_full_design"))/1000000,1)
        print(f"Battery currently holds {full_charge}Wh/{design_charge}Wh")
    if args.health:
        full_charge: float = int(GetValue("energy_full"))
        design_charge: float = int(GetValue("energy_full_design"))
        print(f"Battery health: {round(full_charge / design_charge * 100)}%")
