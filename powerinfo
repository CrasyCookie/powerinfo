#!/bin/sh
# License: MIT-License
# Source: https://github.com/CrasyCookie/powerinfo
VERSION="1.6.0"

BATTERY="BAT0"
BATTERY_DIRECTORY="/sys/class/power_supply/"
BATTERY_PATH="/$BATTERY_DIRECTORY/$BATTERY/"
IGNORE_ERRORS=false
WARN_ON_ERROR=false
OUTPUT_RAW=false
OUTPUT_PERCENTAGE=false
OUTPUT_CYCLES=false
OUTPUT_STATUS=false
OUTPUT_THRESHOLDS=false
OUTPUT_CURRENT_CHARGE_OF_MAX_CHARGE=false
OUTPUT_MAX_CHARGE_OF_DESIGN_MAX_CHARGE=false

help() {
    if [ -n "$1" ]; then
        printf "%s. Use powerinfo -h for help or see powerinfo(1).\n" "$1"
    else
        printf "Powerinfo v%s

Usage:
  powerinfo
  powerinfo -h
  powerinfo -cCeEpRstwW CONFIG
Output flags:
  -a              Activates all output flags below.
  -c              Include battery cycles in output.
  -p              Include battery charge percentage in output.
  -s              Include the charging status in output (Charging/Discharging).
  -t              Include set charging thresholds in output.
  -w              Include current charge out of the maximum charge in output.
  -W              Include maximum charge out of design maximum charge in output.
Control flags:
  -B BATTERY      Use alternative battery.
  -C CONFIG       Use alternative configuration file.
  -e              Ignore errors and issue warnings instead.
  -E              Ignore errors silently.
  -h              Display help.
  -R              Raw output, only output values like 80%% and 48.2Wh/57.0Wh.
  -v              Display version number.\n" "$VERSION"
    fi
}
error() {
    # 2 arguments: the error message and exit code.
    if [ "$IGNORE_ERRORS" = true ]; then
        return 0
    fi
    printf "ERROR: %s" "$1"
    if [ "$WARN_ON_ERROR" = true ]; then
        printf ", continuing\n"
        return 0
    fi
    printf ", exiting\n"
    exit "$2"
}
if_absent() {
    # 2 arguments: the file to check and the error message on failure
    fail_message="$2"
    if [ -z "$2" ]; then
        fail_message="The file /$1 could not be found"
    fi
    if [ ! -e "$BATTERY_PATH/$1" ]; then
        error "$fail_message" 2
    fi
}
empty_flags() {
    WARN_ON_ERROR=true
    if_absent "capacity"
    OUTPUT_PERCENTAGE=true
    if_absent "cycle_count"
    OUTPUT_CYCLES=true
    if_absent "status"
    OUTPUT_STATUS=true
}
# Source the config if it exists
if [ -f "$XDG_CONFIG_HOME/powerinfo/config" ]; then
    . "$XDG_CONFIG_HOME/powerinfo/config"
elif [ -f "$HOME/.config/powerinfo/config" ]; then
    . "$HOME/.config/powerinfo/config"
elif [ -f "/etc/powerinfo/config" ]; then
    . "/etc/powerinfo/config"
fi

if [ -z "$1" ]; then
    empty_flags
else
    while getopts aB:cC:eEhpRstTvwW FLAGS
    do
        case $FLAGS in
            a)
                if_absent "cycle_count" "Can't check power cycles"
                OUTPUT_CYCLES=true
                if_absent "capacity" "Can't check battery percentage"
                OUTPUT_PERCENTAGE=true
                if_absent "status" "Can't check charging status"
                OUTPUT_STATUS=true
                if_absent "charge_start_threshold" "Can't check charging threshold start"
                if_absent "charge_stop_threshold" "Can't check charging threshold stop"
                OUTPUT_THRESHOLDS=true
                if_absent "energy_now" "Can't check current watt hours of charge."
                if_absent "energy_full" "Can't check maximum watt hours of charge"
                if_absent "energy_full_design" "Can't check design maximum watt hours of charge"
                OUTPUT_CURRENT_CHARGE_OF_MAX_CHARGE=true
                OUTPUT_MAX_CHARGE_OF_DESIGN_MAX_CHARGE=true
                ;;
            B)
                if [ ! -e "/$BATTERY_DIRECTORY/$OPTARG" ]; then
                    error "Specified battery does not exist" 3
                fi
                BATTERY="$OPTARG"
                ;;
            c)
                if_absent "cycle_count" "Can't check power cycles"
                OUTPUT_CYCLES=true
                ;;
            C)
                if [ -f "$OPTARG" ]; then
                    CONFIG="$OPTARG"
                else
                    error "Can't find config file" 4
                fi
                ;;
            e)  WARN_ON_ERROR=true
                ;;
            E)  IGNORE_ERRORS=true
                ;;
            h)
                help
                exit 0
                ;;
            p)
                if_absent "capacity" "Can't check battery percentage"
                OUTPUT_PERCENTAGE=true
                ;;
            R)  OUTPUT_RAW=true
                ;;
            s)
                if_absent "status" "Can't check charging status"
                OUTPUT_STATUS=true
                ;;
            t)
                if_absent "charge_start_threshold" "Can't check charging threshold start"
                if_absent "charge_stop_threshold" "Can't check charging threshold stop"
                OUTPUT_THRESHOLDS=true
                ;;
            v)
                printf "Powerinfo v%s\n" "$VERSION"
                exit 0
                ;;
            w)
                if_absent "energy_now" "Can't check current watt hours of charge."
                if_absent "energy_full" "Can't check maximum watt hours of charge"
                OUTPUT_CURRENT_CHARGE_OF_MAX_CHARGE=true
                ;;
            W)
                if_absent "energy_full" "Can't check maximum watt hours of charge"
                if_absent "energy_full_design" "Can't check design maximum watt hours of charge"
                OUTPUT_MAX_CHARGE_OF_DESIGN_MAX_CHARGE=true
                ;;
            ?)
                help "Unknown parameter"
                exit 1
                ;;
        esac
    done
fi

if [ "$OUTPUT_RAW" = true ]; then
    if [ "$OUTPUT_PERCENTAGE" = true ]; then
        percentage_left="$(cat "$BATTERY_PATH/capacity")"
        printf "%s%%\n" "$percentage_left"
    fi
    if [ "$OUTPUT_CYCLES" = true ]; then
        charge_cycles="$(cat "$BATTERY_PATH/cycle_count")"
        printf "%s\n" "$charge_cycles"
    fi
    if [ "$OUTPUT_STATUS" = true ]; then
        charging_status="$(printf "%s\n" "$(cat "$BATTERY_PATH/status")" | tr "A-Z" "a-z")"
        printf "%s\n" "$charging_status"
    fi
    if [ "$OUTPUT_THRESHOLDS" = true ]; then
        charge_start_threshold="$(cat "$BATTERY_PATH/charge_start_threshold")"
        charge_stop_threshold="$(cat "$BATTERY_PATH/charge_stop_threshold")"
        printf "%s%%-%s%%\n" "$charge_start_threshold" "$charge_stop_threshold"
    fi
    if [ "$OUTPUT_CURRENT_CHARGE_OF_MAX_CHARGE" = true ]; then
        current_energy_watt_hours="$(printf "scale=1; %s / 1000000 / 1\n" "$(cat "$BATTERY_PATH/energy_now")"| bc -lq)"
        full_energy_watt_hours="$(printf "scale=1; %s / 1000000 / 1\n" "$(cat "$BATTERY_PATH/energy_full")" | bc -lq)"
        printf "%sWh/%sWh\n" "$current_energy_watt_hours" "$full_energy_watt_hours"
    fi
    if [ "$OUTPUT_MAX_CHARGE_OF_DESIGN_MAX_CHARGE" = true ]; then
        full_energy_watt_hours="$(printf "scale=1; %s / 1000000 / 1\n" "$(cat "$BATTERY_PATH/energy_full")" | bc -lq)"
        design_energy_watt_hours="$(printf "scale=1; %s / 1000000 / 1\n" "$(cat "$BATTERY_PATH/energy_full_design")" | bc -lq)"
        printf "%sWh/%sWh\n" "$full_energy_watt_hours" "$design_energy_watt_hours"
    fi
    exit 0
fi
if [ "$OUTPUT_PERCENTAGE" = true ]; then
    percentage_left="$(cat "$BATTERY_PATH/capacity")"
    printf "%s%% Battery left\n" "$percentage_left"
fi
if [ "$OUTPUT_CYCLES" = true ]; then
    charge_cycles="$(cat "$BATTERY_PATH/cycle_count")"
    printf "Battery has gone through %s charge cycles\n" "$charge_cycles"
fi
if [ "$OUTPUT_STATUS" = true ]; then
    charging_status="$(printf "%s\n" "$(cat "$BATTERY_PATH/status")" | tr "A-Z" "a-z")"
    printf "Battery is currently %s\n" "$charging_status"
fi
if [ "$OUTPUT_THRESHOLDS" = true ]; then
    charge_start_threshold="$(cat "$BATTERY_PATH/charge_start_threshold")"
    charge_stop_threshold="$(cat "$BATTERY_PATH/charge_stop_threshold")"
    printf "Charging starts at %s%% and stops at %s%%\n" "$charge_start_threshold" "$charge_stop_threshold"
fi
if [ "$OUTPUT_CURRENT_CHARGE_OF_MAX_CHARGE" = true ]; then
    current_energy_watt_hours="$(printf "scale=1; %s / 1000000 / 1\n" "$(cat "$BATTERY_PATH/energy_now")" | bc -lq)"
    full_energy_watt_hours="$(printf "scale=1; %s / 1000000 / 1\n" "$(cat "$BATTERY_PATH/energy_full")" | bc -lq)"
    printf "Battery currently holds %sWh/%sWh\n" "$current_energy_watt_hours" "$full_energy_watt_hours"
fi
if [ "$OUTPUT_MAX_CHARGE_OF_DESIGN_MAX_CHARGE" = true ]; then
    full_energy_watt_hours="$(printf "scale=1; %s / 1000000 / 1\n" "$(cat "$BATTERY_PATH/energy_full")" | bc -lq)"
    design_energy_watt_hours="$(printf "scale=1; %s / 1000000 / 1\n" "$(cat "$BATTERY_PATH/energy_full_design")" | bc -lq)"
    printf "Battery can hold %sWh/%sWh of charge\n" "$full_energy_watt_hours" "$design_energy_watt_hours"
fi
