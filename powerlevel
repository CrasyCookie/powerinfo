#!/bin/sh

# Add detection of other battery numbers
BATTERY="/sys/class/power_supply/BAT0/"

# Add all these variable definitions and prints into their own if statements based on set flags.
percentage_left="$(cat "$BATTERY/capacity")"
charge_cycles="$(cat "$BATTERY/cycle_count")"
charging_status="$(printf "$(cat "$BATTERY/status")\n" | tr [A-Z] [a-z])"

charge_start_threshold="$(cat "$BATTERY/charge_start_threshold")"
charge_stop_threshold="$(cat "$BATTERY/charge_stop_threshold")"

current_energy_micro_watt_hours="$(cat "$BATTERY/energy_now")"
full_energy_micro_watt_hours="$(cat "$BATTERY/energy_full")"
design_energy_micro_watt_hours="$(cat "$BATTERY/energy_full_design")"

current_energy_watt_hours="$(echo "scale=1; $current_energy_micro_watt_hours / 1000000 / 1" | bc -lq)"
full_energy_watt_hours="$(echo "scale=1; $full_energy_micro_watt_hours / 1000000 / 1" | bc -lq)"
design_energy_watt_hours="$(echo "scale=1; $design_energy_micro_watt_hours / 1000000 / 1" | bc -lq)"

printf "%s%% Battery left\n" "$percentage_left"
printf "Battery has gone through %s charge cycles\n" "$charge_cycles"
printf "Battery is currently %s\n" "$charging_status"

printf "Charging starts at %s%% and stops at %s%%\n" "$charge_start_threshold" "$charge_stop_threshold"

printf "Battery can hold %sWh/%sWh of charge\n" "$full_energy_watt_hours" "$design_energy_watt_hours"
printf "Battery currently holds %sWh/%sWh\n" "$current_energy_watt_hours" "$full_energy_watt_hours"
# Available values that are useful for printing. A plus (+) means implemented above.
#
#  alarm                     +cycle_count                    +status
# +capacity                   capacity_level
# +charge_start_threshold    +charge_stop_threshold
# +energy_full               +energy_full_design             +energy_now

# Available values that are useful in validation
#
#  present                    charge_behavior
#  type                       uevent
